from marshmallow import Schema, fields, post_load, validate
from datetime import datetime

class BaseSchema(Schema):
    """Base schema class that includes common fields and methods."""
    # Common fields
    id = fields.Int(dump_only=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)
    
    # Pagination fields
    page = fields.Int(load_only=True, validate=validate.Range(min=1))
    per_page = fields.Int(load_only=True, validate=validate.Range(min=1, max=100))
    
    class Meta:
        ordered = True
        strict = True
    
    @post_load
    def make_object(self, data, **kwargs):
        """Create an object from the deserialized data.
        
        Args:
            data: The deserialized data
            **kwargs: Additional arguments
            
        Returns:
            The processed data
        """
        return data
    
    def handle_error(self, error, data, **kwargs):
        """Handle validation errors.
        
        Args:
            error: The validation error
            data: The data that caused the error
            **kwargs: Additional arguments
        """
        raise ValueError(error)

class PaginatedSchema(Schema):
    """Schema for paginated responses."""
    items = fields.List(fields.Nested(BaseSchema))
    total = fields.Int()
    page = fields.Int()
    per_page = fields.Int()
    pages = fields.Int()
    
    class Meta:
        ordered = True
        strict = True 