import os
from typing import Any, Optional
from pathlib import Path

class Env:
    """Environment variable utility class."""
    
    @staticmethod
    def get(key: str, default: Any = None, required: bool = False) -> Any:
        """Get an environment variable.
        
        Args:
            key: The environment variable key
            default: Default value if not found
            required: Whether the variable is required
            
        Returns:
            The environment variable value
            
        Raises:
            ValueError: If required variable is not set
        """
        value = os.getenv(key, default)
        if required and value is None:
            raise ValueError(f"Required environment variable {key} is not set")
        return value
    
    @staticmethod
    def get_bool(key: str, default: bool = False) -> bool:
        """Get a boolean environment variable.
        
        Args:
            key: The environment variable key
            default: Default value if not found
            
        Returns:
            The boolean value
        """
        value = os.getenv(key, str(default)).lower()
        return value in ('true', '1', 'yes')
    
    @staticmethod
    def get_int(key: str, default: int = 0) -> int:
        """Get an integer environment variable.
        
        Args:
            key: The environment variable key
            default: Default value if not found
            
        Returns:
            The integer value
        """
        try:
            return int(os.getenv(key, default))
        except (TypeError, ValueError):
            return default
    
    @staticmethod
    def get_float(key: str, default: float = 0.0) -> float:
        """Get a float environment variable.
        
        Args:
            key: The environment variable key
            default: Default value if not found
            
        Returns:
            The float value
        """
        try:
            return float(os.getenv(key, default))
        except (TypeError, ValueError):
            return default
    
    @staticmethod
    def get_list(key: str, default: Optional[str] = None, separator: str = ',') -> list:
        """Get a list from an environment variable.
        
        Args:
            key: The environment variable key
            default: Default value if not found
            separator: String to split the value on
            
        Returns:
            The list of values
        """
        value = os.getenv(key, default)
        if value is None:
            return []
        return [v.strip() for v in value.split(separator) if v.strip()]
    
    @staticmethod
    def get_path(key: str, default: Optional[str] = None) -> Path:
        """Get a Path from an environment variable.
        
        Args:
            key: The environment variable key
            default: Default value if not found
            
        Returns:
            The Path object
        """
        value = os.getenv(key, default)
        if value is None:
            return Path()
        return Path(value) 